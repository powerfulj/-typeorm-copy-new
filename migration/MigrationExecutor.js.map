{"version":3,"sources":["../../src/migration/MigrationExecutor.ts"],"names":[],"mappings":"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","file":"MigrationExecutor.js","sourcesContent":["import {Table} from \"../schema-builder/table/Table\";\r\nimport {Connection} from \"../connection/Connection\";\r\nimport {Migration} from \"./Migration\";\r\nimport {ObjectLiteral} from \"../common/ObjectLiteral\";\r\nimport {PromiseUtils} from \"../util/PromiseUtils\";\r\nimport {QueryRunner} from \"../query-runner/QueryRunner\";\r\nimport {SqlServerDriver} from \"../driver/sqlserver/SqlServerDriver\";\r\nimport {MssqlParameter} from \"../driver/sqlserver/MssqlParameter\";\r\nimport {SqlServerConnectionOptions} from \"../driver/sqlserver/SqlServerConnectionOptions\";\r\nimport {PostgresConnectionOptions} from \"../driver/postgres/PostgresConnectionOptions\";\r\nimport { MongoDriver } from \"../driver/mongodb/MongoDriver\";\r\nimport { MongoQueryRunner } from \"../driver/mongodb/MongoQueryRunner\";\r\n\r\n/**\r\n * Executes migrations: runs pending and reverts previously executed migrations.\r\n */\r\nexport class MigrationExecutor {\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Public Properties\r\n    // -------------------------------------------------------------------------\r\n\r\n    /**\r\n     * Indicates how migrations should be run in transactions.\r\n     *   all: all migrations are run in a single transaction\r\n     *   none: all migrations are run without a transaction\r\n     *   each: each migration is run in a separate transaction\r\n     */\r\n    transaction: \"all\" | \"none\" | \"each\" = \"all\";\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Private Properties\r\n    // -------------------------------------------------------------------------\r\n\r\n    private readonly migrationsTable: string;\r\n    private readonly migrationsTableName: string;\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Constructor\r\n    // -------------------------------------------------------------------------\r\n\r\n    constructor(protected connection: Connection,\r\n                protected queryRunner?: QueryRunner) {\r\n\r\n        const options = <SqlServerConnectionOptions|PostgresConnectionOptions>this.connection.driver.options;\r\n        this.migrationsTableName = connection.options.migrationsTableName || \"migrations\";\r\n        this.migrationsTable = this.connection.driver.buildTableName(this.migrationsTableName, options.schema, options.database);\r\n    }\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Public Methods\r\n    // -------------------------------------------------------------------------\r\n\r\n    /**\r\n     * Tries to execute a single migration given.\r\n     */\r\n    public async executeMigration(migration: Migration): Promise<Migration> {\r\n        return this.withQueryRunner(async (queryRunner) => {\r\n            await this.createMigrationsTableIfNotExist(queryRunner);\r\n            await (migration.instance as any).up(queryRunner);\r\n            await this.insertExecutedMigration(queryRunner, migration);\r\n\r\n            return migration;\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Returns an array of all migrations.\r\n     */\r\n    public async getAllMigrations(): Promise<Migration[]> {\r\n        return Promise.resolve(this.getMigrations());\r\n    }\r\n\r\n    /**\r\n     * Returns an array of all executed migrations.\r\n     */\r\n    public async getExecutedMigrations(): Promise<Migration[]> {\r\n        return this.withQueryRunner(async queryRunner => {\r\n            await this.createMigrationsTableIfNotExist(queryRunner);\r\n\r\n            return await this.loadExecutedMigrations(queryRunner);\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Returns an array of all pending migrations.\r\n     */\r\n    public async getPendingMigrations(): Promise<Migration[]> {\r\n        const allMigrations = await this.getAllMigrations();\r\n        const executedMigrations = await this.getExecutedMigrations();\r\n\r\n        return allMigrations.filter(migration =>\r\n            executedMigrations.find(\r\n                executedMigration =>\r\n                    executedMigration.name === migration.name\r\n            )\r\n        );\r\n    }\r\n\r\n    /**\r\n     * Inserts an executed migration.\r\n     */\r\n    public insertMigration(migration: Migration): Promise<void> {\r\n        return new Promise((resolve, reject) => {\r\n            this.withQueryRunner(queryRunner => {\r\n                this.insertExecutedMigration(queryRunner, migration)\r\n                    .then(resolve)\r\n                    .catch(reject);\r\n            });\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Deletes an executed migration.\r\n     */\r\n    public deleteMigration(migration: Migration): Promise<void> {\r\n        return new Promise((resolve, reject) => {\r\n            this.withQueryRunner(queryRunner => {\r\n                this.deleteExecutedMigration(queryRunner, migration)\r\n                    .then(resolve)\r\n                    .catch(reject);\r\n            });\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Lists all migrations and whether they have been executed or not\r\n     * returns true if there are unapplied migrations\r\n     */\r\n    async showMigrations(): Promise<boolean> {\r\n        let hasUnappliedMigrations = false;\r\n        const queryRunner = this.queryRunner || this.connection.createQueryRunner(\"master\");\r\n        // create migrations table if its not created yet\r\n        await this.createMigrationsTableIfNotExist(queryRunner);\r\n        // get all migrations that are executed and saved in the database\r\n        const executedMigrations = await this.loadExecutedMigrations(queryRunner);\r\n\r\n        // get all user's migrations in the source code\r\n        const allMigrations = this.getMigrations();\r\n\r\n        for (const migration of allMigrations) {\r\n            const executedMigration = executedMigrations.find(executedMigration => executedMigration.name === migration.name);\r\n\r\n            if (executedMigration) {\r\n                this.connection.logger.logSchemaBuild(` [X] ${migration.name}`);\r\n            } else {\r\n                hasUnappliedMigrations = true;\r\n                this.connection.logger.logSchemaBuild(` [ ] ${migration.name}`);\r\n            }\r\n        }\r\n\r\n        // if query runner was created by us then release it\r\n        if (!this.queryRunner) {\r\n            await queryRunner.release();\r\n        }\r\n\r\n        return hasUnappliedMigrations;\r\n    }\r\n\r\n    /**\r\n     * Executes all pending migrations. Pending migrations are migrations that are not yet executed,\r\n     * thus not saved in the database.\r\n     */\r\n    async executePendingMigrations(): Promise<Migration[]> {\r\n\r\n        const queryRunner = this.queryRunner || this.connection.createQueryRunner(\"master\");\r\n        // create migrations table if its not created yet\r\n        await this.createMigrationsTableIfNotExist(queryRunner);\r\n        // get all migrations that are executed and saved in the database\r\n        const executedMigrations = await this.loadExecutedMigrations(queryRunner);\r\n\r\n        // get the time when last migration was executed\r\n        let lastTimeExecutedMigration = this.getLatestTimestampMigration(executedMigrations);\r\n\r\n        // get all user's migrations in the source code\r\n        const allMigrations = this.getMigrations();\r\n\r\n        // variable to store all migrations we did successefuly\r\n        const successMigrations: Migration[] = [];\r\n\r\n        // find all migrations that needs to be executed\r\n        const pendingMigrations = allMigrations.filter(migration => {\r\n            // check if we already have executed migration\r\n            const executedMigration = executedMigrations.find(executedMigration => executedMigration.name === migration.name);\r\n            if (executedMigration)\r\n                return false;\r\n\r\n            // migration is new and not executed. now check if its timestamp is correct\r\n            // if (lastTimeExecutedMigration && migration.timestamp < lastTimeExecutedMigration.timestamp)\r\n            //     throw new Error(`New migration found: ${migration.name}, however this migration's timestamp is not valid. Migration's timestamp should not be older then migrations already executed in the database.`);\r\n\r\n            // every check is passed means that migration was not run yet and we need to run it\r\n            return true;\r\n        });\r\n\r\n        // if no migrations are pending then nothing to do here\r\n        if (!pendingMigrations.length) {\r\n            this.connection.logger.logSchemaBuild(`No migrations are pending`);\r\n            // if query runner was created by us then release it\r\n            if (!this.queryRunner)\r\n                await queryRunner.release();\r\n            return [];\r\n        }\r\n\r\n        // log information about migration execution\r\n        this.connection.logger.logSchemaBuild(`${executedMigrations.length} migrations are already loaded in the database.`);\r\n        this.connection.logger.logSchemaBuild(`${allMigrations.length} migrations were found in the source code.`);\r\n        if (lastTimeExecutedMigration)\r\n            this.connection.logger.logSchemaBuild(`${lastTimeExecutedMigration.name} is the last executed migration. It was executed on ${new Date(lastTimeExecutedMigration.timestamp).toString()}.`);\r\n        this.connection.logger.logSchemaBuild(`${pendingMigrations.length} migrations are new migrations that needs to be executed.`);\r\n\r\n        // start transaction if its not started yet\r\n        let transactionStartedByUs = false;\r\n        if (this.transaction === \"all\" && !queryRunner.isTransactionActive) {\r\n            await queryRunner.startTransaction();\r\n            transactionStartedByUs = true;\r\n        }\r\n\r\n        // run all pending migrations in a sequence\r\n        try {\r\n            await PromiseUtils.runInSequence(pendingMigrations, async migration => {\r\n                if (this.transaction === \"each\" && !queryRunner.isTransactionActive) {\r\n                    await queryRunner.startTransaction();\r\n                    transactionStartedByUs = true;\r\n                }\r\n\r\n                return migration.instance!.up(queryRunner)\r\n                    .then(async () => { // now when migration is executed we need to insert record about it into the database\r\n                        await this.insertExecutedMigration(queryRunner, migration);\r\n                        // commit transaction if we started it\r\n                        if (this.transaction === \"each\" && transactionStartedByUs)\r\n                            await queryRunner.commitTransaction();\r\n                    })\r\n                    .then(() => { // informative log about migration success\r\n                        successMigrations.push(migration);\r\n                        this.connection.logger.logSchemaBuild(`Migration ${migration.name} has been executed successfully.`);\r\n                    });\r\n            });\r\n\r\n            // commit transaction if we started it\r\n            if (this.transaction === \"all\" && transactionStartedByUs)\r\n                await queryRunner.commitTransaction();\r\n\r\n        } catch (err) { // rollback transaction if we started it\r\n            if (transactionStartedByUs) {\r\n                try { // we throw original error even if rollback thrown an error\r\n                    await queryRunner.rollbackTransaction();\r\n                } catch (rollbackError) { }\r\n            }\r\n\r\n            throw err;\r\n\r\n        } finally {\r\n\r\n            // if query runner was created by us then release it\r\n            if (!this.queryRunner)\r\n                await queryRunner.release();\r\n        }\r\n        return successMigrations;\r\n\r\n    }\r\n\r\n    /**\r\n     * Reverts last migration that were run.\r\n     */\r\n    async undoLastMigration(): Promise<void> {\r\n\r\n        const queryRunner = this.queryRunner || this.connection.createQueryRunner(\"master\");\r\n\r\n        // create migrations table if its not created yet\r\n        await this.createMigrationsTableIfNotExist(queryRunner);\r\n\r\n        // get all migrations that are executed and saved in the database\r\n        const executedMigrations = await this.loadExecutedMigrations(queryRunner);\r\n\r\n        // get the time when last migration was executed\r\n        let lastTimeExecutedMigration = this.getLatestExecutedMigration(executedMigrations);\r\n\r\n        // if no migrations found in the database then nothing to revert\r\n        if (!lastTimeExecutedMigration) {\r\n            this.connection.logger.logSchemaBuild(`No migrations was found in the database. Nothing to revert!`);\r\n            return;\r\n        }\r\n\r\n        // get all user's migrations in the source code\r\n        const allMigrations = this.getMigrations();\r\n\r\n        // find the instance of the migration we need to remove\r\n        const migrationToRevert = allMigrations.find(migration => migration.name === lastTimeExecutedMigration!.name);\r\n\r\n        // if no migrations found in the database then nothing to revert\r\n        if (!migrationToRevert)\r\n            throw new Error(`No migration ${lastTimeExecutedMigration.name} was found in the source code. Make sure you have this migration in your codebase and its included in the connection options.`);\r\n\r\n        // log information about migration execution\r\n        this.connection.logger.logSchemaBuild(`${executedMigrations.length} migrations are already loaded in the database.`);\r\n        this.connection.logger.logSchemaBuild(`${lastTimeExecutedMigration.name} is the last executed migration. It was executed on ${new Date(lastTimeExecutedMigration.timestamp).toString()}.`);\r\n        this.connection.logger.logSchemaBuild(`Now reverting it...`);\r\n\r\n        // start transaction if its not started yet\r\n        let transactionStartedByUs = false;\r\n        if ((this.transaction !== \"none\") && !queryRunner.isTransactionActive) {\r\n            await queryRunner.startTransaction();\r\n            transactionStartedByUs = true;\r\n        }\r\n\r\n        try {\r\n            await migrationToRevert.instance!.down(queryRunner);\r\n            await this.deleteExecutedMigration(queryRunner, migrationToRevert);\r\n            this.connection.logger.logSchemaBuild(`Migration ${migrationToRevert.name} has been reverted successfully.`);\r\n\r\n            // commit transaction if we started it\r\n            if (transactionStartedByUs)\r\n                await queryRunner.commitTransaction();\r\n\r\n        } catch (err) { // rollback transaction if we started it\r\n            if (transactionStartedByUs) {\r\n                try { // we throw original error even if rollback thrown an error\r\n                    await queryRunner.rollbackTransaction();\r\n                } catch (rollbackError) { }\r\n            }\r\n\r\n            throw err;\r\n\r\n        } finally {\r\n\r\n            // if query runner was created by us then release it\r\n            if (!this.queryRunner)\r\n                await queryRunner.release();\r\n        }\r\n    }\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Protected Methods\r\n    // -------------------------------------------------------------------------\r\n\r\n    /**\r\n     * Creates table \"migrations\" that will store information about executed migrations.\r\n     */\r\n    protected async createMigrationsTableIfNotExist(queryRunner: QueryRunner): Promise<void> {\r\n        // If driver is mongo no need to create\r\n        if (this.connection.driver instanceof MongoDriver) {\r\n            return;\r\n        }\r\n        const tableExist = await queryRunner.hasTable(this.migrationsTable); // todo: table name should be configurable\r\n        if (!tableExist) {\r\n            await queryRunner.createTable(new Table(\r\n                {\r\n                    name: this.migrationsTable,\r\n                    columns: [\r\n                        {\r\n                            name: \"id\",\r\n                            type: this.connection.driver.normalizeType({type: this.connection.driver.mappedDataTypes.migrationId}),\r\n                            isGenerated: true,\r\n                            generationStrategy: \"increment\",\r\n                            isPrimary: true,\r\n                            isNullable: false\r\n                        },\r\n                        {\r\n                            name: \"timestamp\",\r\n                            type: this.connection.driver.normalizeType({type: this.connection.driver.mappedDataTypes.migrationTimestamp}),\r\n                            isPrimary: false,\r\n                            isNullable: false\r\n                        },\r\n                        {\r\n                            name: \"name\",\r\n                            type: this.connection.driver.normalizeType({type: this.connection.driver.mappedDataTypes.migrationName}),\r\n                            isNullable: false\r\n                        },\r\n                    ]\r\n                },\r\n            ));\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Loads all migrations that were executed and saved into the database (sorts by id).\r\n     */\r\n    protected async loadExecutedMigrations(queryRunner: QueryRunner): Promise<Migration[]> {\r\n        if (this.connection.driver instanceof MongoDriver) {\r\n            const mongoRunner = queryRunner as MongoQueryRunner;\r\n            return await mongoRunner.databaseConnection\r\n            .db(this.connection.driver.database!)\r\n            .collection(this.migrationsTableName)\r\n            .find<Migration>()\r\n            .sort({\"_id\": -1})\r\n            .toArray();\r\n        } else {\r\n            const migrationsRaw: ObjectLiteral[] = await this.connection.manager\r\n            .createQueryBuilder(queryRunner)\r\n            .select()\r\n            .orderBy(this.connection.driver.escape(\"id\"), \"DESC\")\r\n            .from(this.migrationsTable, this.migrationsTableName)\r\n            .getRawMany();\r\n            return migrationsRaw.map(migrationRaw => {\r\n                return new Migration(parseInt(migrationRaw[\"id\"]), parseInt(migrationRaw[\"timestamp\"]), migrationRaw[\"name\"]);\r\n            });\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets all migrations that setup for this connection.\r\n     */\r\n    protected getMigrations(): Migration[] {\r\n        const migrations = this.connection.migrations.map(migration => {\r\n            const migrationClassName = migration.name || (migration.constructor as any).name;\r\n            const migrationTimestamp = parseInt(migrationClassName.substr(-13), 10);\r\n            if (!migrationTimestamp || isNaN(migrationTimestamp)) {\r\n                throw new Error(`${migrationClassName} migration name is wrong. Migration class name should have a JavaScript timestamp appended.`);\r\n            }\r\n\r\n            return new Migration(undefined, migrationTimestamp, migrationClassName, migration);\r\n        });\r\n\r\n        this.checkForDuplicateMigrations(migrations);\r\n\r\n        // sort them by timestamp\r\n        return migrations.sort((a, b) => a.timestamp - b.timestamp);\r\n    }\r\n\r\n    protected checkForDuplicateMigrations(migrations: Migration[]) {\r\n        const migrationNames = migrations.map(migration => migration.name);\r\n        const duplicates = Array.from(new Set(migrationNames.filter((migrationName, index) => migrationNames.indexOf(migrationName) < index)));\r\n        if (duplicates.length > 0) {\r\n            throw Error(`Duplicate migrations: ${duplicates.join(\", \")}`);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Finds the latest migration (sorts by timestamp) in the given array of migrations.\r\n     */\r\n    protected getLatestTimestampMigration(migrations: Migration[]): Migration|undefined {\r\n        const sortedMigrations = migrations.map(migration => migration).sort((a, b) => (a.timestamp - b.timestamp) * -1);\r\n        return sortedMigrations.length > 0 ? sortedMigrations[0] : undefined;\r\n    }\r\n\r\n    /**\r\n     * Finds the latest migration in the given array of migrations.\r\n     * PRE: Migration array must be sorted by descending id.\r\n     */\r\n    protected getLatestExecutedMigration(sortedMigrations: Migration[]): Migration|undefined {\r\n        return sortedMigrations.length > 0 ? sortedMigrations[0] : undefined;\r\n    }\r\n\r\n    /**\r\n     * Inserts new executed migration's data into migrations table.\r\n     */\r\n    protected async insertExecutedMigration(queryRunner: QueryRunner, migration: Migration): Promise<void> {\r\n        const values: ObjectLiteral = {};\r\n        if (this.connection.driver instanceof SqlServerDriver) {\r\n            values[\"timestamp\"] = new MssqlParameter(migration.timestamp, this.connection.driver.normalizeType({ type: this.connection.driver.mappedDataTypes.migrationTimestamp }) as any);\r\n            values[\"name\"] = new MssqlParameter(migration.name, this.connection.driver.normalizeType({ type: this.connection.driver.mappedDataTypes.migrationName }) as any);\r\n        } else {\r\n            values[\"timestamp\"] = migration.timestamp;\r\n            values[\"name\"] = migration.name;\r\n        }\r\n        if (this.connection.driver instanceof MongoDriver) {\r\n            const mongoRunner = queryRunner as MongoQueryRunner;\r\n            await mongoRunner.databaseConnection.db(this.connection.driver.database!).collection(this.migrationsTableName).insert(values);\r\n        } else {\r\n            const qb = queryRunner.manager.createQueryBuilder();\r\n            await qb.insert()\r\n                .into(this.migrationsTable)\r\n                .values(values)\r\n                .execute();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Delete previously executed migration's data from the migrations table.\r\n     */\r\n    protected async deleteExecutedMigration(queryRunner: QueryRunner, migration: Migration): Promise<void> {\r\n\r\n        const conditions: ObjectLiteral = {};\r\n        if (this.connection.driver instanceof SqlServerDriver) {\r\n            conditions[\"timestamp\"] = new MssqlParameter(migration.timestamp, this.connection.driver.normalizeType({ type: this.connection.driver.mappedDataTypes.migrationTimestamp }) as any);\r\n            conditions[\"name\"] = new MssqlParameter(migration.name, this.connection.driver.normalizeType({ type: this.connection.driver.mappedDataTypes.migrationName }) as any);\r\n        } else {\r\n            conditions[\"timestamp\"] = migration.timestamp;\r\n            conditions[\"name\"] = migration.name;\r\n        }\r\n\r\n        if (this.connection.driver instanceof MongoDriver) {\r\n            const mongoRunner = queryRunner as MongoQueryRunner;\r\n            await mongoRunner.databaseConnection.db(this.connection.driver.database!).collection(this.migrationsTableName).deleteOne(conditions);\r\n        } else {\r\n            const qb = queryRunner.manager.createQueryBuilder();\r\n            await qb.delete()\r\n                .from(this.migrationsTable)\r\n                .where(`${qb.escape(\"timestamp\")} = :timestamp`)\r\n                .andWhere(`${qb.escape(\"name\")} = :name`)\r\n                .setParameters(conditions)\r\n                .execute();\r\n        }\r\n\r\n    }\r\n\r\n    protected async withQueryRunner<T extends any>(callback: (queryRunner: QueryRunner) => T) {\r\n        const queryRunner = this.queryRunner || this.connection.createQueryRunner(\"master\");\r\n\r\n        try {\r\n            return callback(queryRunner);\r\n        } finally {\r\n            if (!this.queryRunner) {\r\n                await queryRunner.release();\r\n            }\r\n        }\r\n    }\r\n}\r\n"],"sourceRoot":".."}